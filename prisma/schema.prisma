generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELLED
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  SOLD_OUT
  CANCELLED
}

enum EventCategory {
  TECH
  HEALTH
  ENTERTAINMENT
  FASHION
  SPORTS
  BUSINESS
  CONFERENCE
  OTHERS
}

enum DiscountStatus {
  ACTIVE
  ENDED
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  age           Int
  email         String  @unique
  password      String
  profileImage  String
  firstName     String
  lastName      String
  twoFASecret   String?
  twoFAEnabled  Boolean @default(false)
  accountName   String
  accountNumber String  @unique
  bankName      String

  tickets   Ticket[]
  events    Event[]    @relation("Attendees")
  organizer Organizer?

  @@index([email])
  @@map("users")
}

model Ticket {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tier      String
  price     Int
  accessKey String       @unique
  status    TicketStatus @default(ACTIVE)

  attendee Int
  user     User @relation(fields: [attendee], references: [id])

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  @@index([attendee])
  @@index([eventId])
  @@index([accessKey])
  @@map("tickets")
}

model Organizer {
  id Int @id @default(autoincrement())

  name          String[]
  email         String
  accountName   String
  accountNumber String   @unique
  bankName      String
  recipientCode String?
  phone         String
  whatsapp      String?
  twitter       String?
  instagram     String?
  website       String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  events Event[]

  @@index([userId])
  @@map("organizers")
}

model TicketTier {
  id Int @id @default(autoincrement())

  tier                    String
  price                   Int
  discountPrice           Int?
  discountExpiration      DateTime?
  numberOfDiscountTickets Int?
  discountStatus          DiscountStatus?
  benefits                String?
  totalNumberOfTickets    Int
  soldOut                 Boolean         @default(false)

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  @@index([tier])
  @@map("ticket tiers")
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title          String
  category       EventCategory
  description    String
  date           DateTime
  startTime      DateTime
  endTime        DateTime
  status         EventStatus   @default(UPCOMING)
  ageRestriction Int?
  venue          String
  address        String
  capacity       Int
  numberOfShares Int
  revenue        Float
  poster         String
  media          String[]

  organizerId Int
  organizer   Organizer @relation(fields: [organizerId], references: [id])

  users User[] @relation("Attendees")

  ticketTier TicketTier[]
  tickets    Ticket[]

  @@index([category])
  @@map("events")
}
